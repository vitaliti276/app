1. Что такое специфичность селекторов CSS и как она работает?


1) Специфичность селектора (еще называют весом) это свойство определяющее приоритет стилевого правила, то есть то, какой стиль будет применен к HTML элементу в итоге. Например, используя какую-нибудь UI библиотеку, элементам этой библиотеки будут применены правила заданные авторами по умолчанию. При необходимости можно поменять стили на свои, «перебив» дефолтные более специфичным селектором.


2. Какая разница между сбросом и нормализацией CSS? Что вы выберете и почему ?


2)Цель сброса CSS — сбросить все стили в ноль для того, чтобы можно было начать стилизацию сайта с чистого листа. Недостатком сброса стилей является то, что частично их придется устанавливать заново. Цель нормализации — привести исходные стили к единому состоянию, во всех браузерах. Если рассматривать Normalize.css, то с его помощью не просто устанавливаются определенные значения стилей, но и решаются некоторые проблемы отображения элементов, в особенности в мобильных браузерах. Выбирать между двумя инструментами стоит в зависимости от поставленной задачи.


3. За что отвечает свойство float и как оно работает ?


3)Определяет сторону, по которой будет выровнен элемент. Соседние элементы будут «обтекать» такой элемент по противоположной стороне.


4. Что делает свойство z-index и как формируется контекст наложения?


4) Определяет положение элемента по оси Z. Если элементы перекрываются друг другом (накладываются), это свойство диктует порядок наложения. Работает только для элементов у которых свойство position установлено как absolute/relative/fixed.


5. Опишите BFC (Block Formatting Context — блочный контекст форматирования) и принцип его работы.


5) Block formatting context — одна из трех областей форматирования, на ряду с inline formatting contexts и flex formatting contexts. Это область в которой происходит расположение и взаимодействия элементов по определенным правилам. В частности элементы отображаемые в области BFC подчиняются правилам блочной модели (CSS Box Model), которая определяет взаимодействие внешних, внутренних отступов, границ (margins, padding, borders) с другими элементами находящимися в той же области. Принцип работы BFC лучше всего показывать на примере, некоторые из них можно найти по ссылке ниже.


6. Какие существуют методы очистки floats и какие из них подходят для какого контекста ?


6) Свойство clear, примененное к нижестоящему (от float) элементу со значениями left, right, both, а также свойство overflow со значением hidden. Само по себе свойство overflow управляет отображением содержимого блока (добавляет полосы прокрутки, обрезает не поместившийся контент), в добавок, значения auto, scroll или hidden отменяют свойство float.


7. Каким образом вы боритесь с проблемами стилизации, связанными с кросс-браузерностью?


7) Есть несколько основных решений проблем стилизации, связанных с кросс-браузерностью. Например, разделение стилей для разных браузеров и устройств, а также добавление вендорных префиксов к стилевым правилам. Метод разделения стилей заключается в идентификации вида браузера пользователя и применении соответствующего стиля совместно с основным, путем добавления условных комментариев (для IE) или CSS-хаков. С помощью правила @media можно указать тип устройства, для которого будет применены определенные стили, а добавление вендорных префиксов к стилям расширит список поддерживаемых браузеров.


8. Как работать со стилями в старых браузерах с ограниченными возможностями? Какие методы/техники вы используете ? 


8)Подход progressive enhancement предполагает поэтапное создание веб-интерфейсов, должны создаваться поэтапно, циклически, от простого к сложному. На каждом из этапов создается законченный веб-интерфейс, как улучшенная версия предыдущего. Всего можно выделить 4 этапа:
HTML — содержимое страницы размечается с помощью HTML. Важно сделать логически и семантически правильную разметку, тогда документ будет корректно отображен любым браузером. Этот этап является самым важным.
CSS — документ получает аккуратный вид: появляется сетка страницы, фоновые изображения и т.д.
CSS3 — добавляются анимационные и декоративные фишки, тени, плашки, уголки и т.д.
JavaScript — улучшается взаимодействие с интерфейсом: AJAX решения, динамические элементы и т.д.
Такой подход в сочетании с mobile first гарантирует, что страница сайта будет корректно отображаться на любых устройствах. Подход graceful degradation имеет обратную философию — функционал сайта деградирует от сложного к более простому в ранних версиях браузеров, где еще не реализованы последние фичи. Для определения наличия нужного функционала браузера используется другой прием — feature detection (правило @supports)


9. Какие вы знаете способы для скрытия контента сайта (при этом оставив его доступным для скринридеров)?


9)Свойство opacity со значением 0 скрывает элемент и все его дочерние элементы. Скрытый контент всё ещё присутствует на странице, его место ничем не занято. Техника .sr-only позволяет скрыть элемент, но оставить его доступным для скринридеров

.sr-only {
      border: 0; 
      clip: rect(0 0 0 0); 
      height: 1px; 
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }


10. Вы, когда-либо, использовали Grid систему, и, если да, то какую технологию для упрощения разметки HTML-страниц вы предпочитаете?


10) Grid Layout — двумерная сетка (набор вертикальных и горизонтальных линий) для CSS. Используется для размещения основных областей страницы или небольших элементов пользовательского интерфейса. Элементы помещаются в сетку, соответственно строкам и столбцам. Grid позволяет создать сетку с фиксированными размерами полос, размещать элементы в заданном месте, создавать дополнительные полосы для управления контентом и выравниванием. В сочетании с flexbox, grid Layout позволяет строить макеты, создание которых при помощи чистого CSS невозможно.


11. Что вы можете рассказать о медиа-запросах ?


11) Медиа-запросы позволяют адаптировать страницы для разных типов устройств (принтеров, речевых браузеров и т.д.) или для устройств с определенными характеристиками: ширина (width), высота (height), соотношение ширины к высоте области просмотра (aspect-ratio), ориентация (orientation), разрешение (resolution), количество бит на каждый из цветовых компонентов устройства (color) и другие.


12. Что вы можете рассказать о стилизации SVG?


12)Стилизация (изменение внешнего вида) SVG-элементов аналогично HTML, с некоторыми особенностями: фон назначается свойством fill, а граница — stroke вместо border. Свойства могут добавляться как непосредственно в теги, так и как стили. Также возможно подключение внешних стилей. Поскольку SVG основан на XML-разметке, то стиль в .svg-документе необходимо заключать в CDATA, иначе конструкция будет конфликтовать с XML-парсерами. SVG — элементы можно группировать с помощью тэга g и применять к ним общие стили.


13. Приведите какой-либо пример свойства @media отличительного от @media screen ?


13)@media all — значение по умолчанию, для всех типов устройств. @media print — принтеры.
@media speech — программы для воспроизведения текста вслух (в том числе речевые браузеры) и речевые синтезаторы.


14. Какие моменты по написанию эффективного CSS вы бы выделили?


14) Код должен быть валидным (корректно выполняться).
Комментарии должны быть подробными.
Код должен быть разбит на логические блоки, каждый блок нужно отделять пустой строкой.
Использование иерархии облегчает чтение кода.
Свойства желательно размещать в алфавитном порядке.
Каскадные таблицы (CSS) нужно размещать в отдельном файле.
Неиспользуемые селекторы нужно удалять.
Нужно использовать там, где возможно, универсальные свойства.


15. Каковы преимущества/недостатки использования препроцессоров CSS? Опишите, что вам понравилось/не понравилось в использованных вами, препроцессорах.


15) Преимущества использования препроцессоров: использование дополнительного функционала (переменных, условий, циклов, функций и т.д.). Недостатки, в целом, проявляются при неправильном использовании этого функционала. Например:
Злоупотребление примесями (@mixin, когда один объект копирует свойства другого объекта). В итоге значительно увеличивается размер файла и падает общая производительность.
Использование расширения (@extend) в Sass позволяет избежать описанную выше проблему, но может возникнуть другая: многократное расширение базового класса может привести к получению CSS-правила с длинным именем селектора, что плохо сказывается на производительности.
При редактировании миксина или базового класса можно, не заметив, изменить свойства множества объектов.
Обобщая селекторы, можно слишком увеличить их специфичность, что затруднит их управление и поддержку.
В целом, использование препроцессоров предоставляет отличные синтаксис и возможности, но нужно тщательно взвешивать все за и против их использования для каждого конкретного проекта.


16. Какие существуют псевдоэлементы и для чего они используются.


16) Псевдоэлемент в CSS — это ключевое слово, которое добавляется к селектору и позволяет стилизовать определенную часть выбранного элемента. Псевдоэлементы: :after, :before, :first-letter, :first-line.
:after — применяется для вставки нужного контента после выбранного элемента. Применяется со свойством content, которое определяет содержимое для вставки.
:before — применяется для вставки нужного контента до выбранного элемента. Также необходимо задать свойство content с содержимым для вставки.
:first-letter — добавляет к первому элементу в тексте и определяет его стиль: можно создавать буквицу (увеличенную первую букву, базовая линия которой ниже на одну или несколько строк базовой линии основного текста) или выступающий инициал (увеличенная прописная буква, линия которой совпадает с линией основного текста).
:first-line — используется для изменения первой строки блочного текста.


17. Что такое блочная модель, и как, с помощью CSS, менять расположение блоков на странице в браузере?


17) Блочная модель — модель, при которой каждый элемент представляет собой прямоугольный блок и имеет ширину, высоту, поля, границы и отступы. Менять расположение элементов можно с помощью позиционирования (position), отступов (margin) и трансформирования (transform).


18. Что делает свойство *{box-sizing: border-box;}? Какие его преимущества ?


18) При использовании box-sizing: border-box свойства width и height включают в себя значения padding и border, но не отступов (margin). Т.е. объект остается с фиксированными параметрами, но уменьшается место для контента. При использовании border-box, не нужно беспокоиться о том, сколько места будет занимать отступ или граница, так как эти значения просто отнимаются от общей ширины, а не добавляются к ней


19. За что отвечает свойство display в CSS? Приведите пару примеров его использования.


19) Свойство display определяет как элемент будет показан в документе. Если указать свойству display значение none, то элемент и все его дочерние элементы будет удалены из дерева доступности (объект в котором хранится информация для вспомогательных технологий по обеспечению доступности сайта для людей с повышенными потребностями) и не будут восприниматься технологиями чтения экранов. Значение свойства display — contents, удаляет элемент из дерева доступности, дочерние элементы становятся дочерними элементами следующего уровня в DOM.


20. Объясните разницу между значениями inline и inline-block ?


20) Inline и inline-block это значения, которые можно назначить свойству display. При использовании inline для любого элемента он становится строчным. Inline-block объединяет в себе характеристики как строчных, так и блочных элементов: блочный элемент с поведением, как у строчного. Содержимое таких элементов будет отображаться, как обычно, но при этом блоки будут вести себя как строчные элементы, выстраиваясь в одной строке друг за другом и переносясь на новую строку лишь при необходимости.


21. Объясните разницу между псевдоклассами «nth-of-type()» и «nth-child()» ?


21) nth-of-type() используется для добавления стиля к элементам указанного типа на основе нумерации в дереве элементов.
nth-child() это псевдокласс, который используется для выбора дочерних элементов с помощью числового выражения без учета типов элементов.


22. Объясните разницу между relative, fixed, absolute и static — видами позиционирования элемента ?


22) Relative — положение элемента задается относительно исходного расположения. Сам элемент становится родительским для всех дочерних, абсолютно позиционировнных элементов.
Fixed — положение элемента привязывается к указанной свойствами left, top, right и bottom точке на экране и не меняет своего положения при прокрутке страницы.
Absolute — положение элемента задается относительно границ родительского элемента (тот у которого position: relative), элемент выпадает из изначального контекста.
Static — положение элемента остается неизменным. Такой вид позиционирования еще называют нормальным. Элементы отображаются в том же порядке, как они идут в исходном коде.


23. Какие CSS фреймворки вы использовали? Как бы вы изменили/улучшили их?


23) Foundation — это адаптивный фреймворк, который позволяет легко создавать красивые адаптивные веб-сайты, приложения и электронные письма. Основа семантическая, удобочитаемая, гибкая и полностью настраиваемая. Foundation достаточно громоздкий и сложный для начинающих разработчиков, но создатели проводят учебные занятия.


24. В чем разница между разработкой адаптивных веб-сайтов и использовании “Mobile first” стратегии ?


24) При адаптивной разработке главными являются 3 вещи: резиновый макет, медиа-выражения и гибкие картинки. Все размеры рекомендуют указывать в процентах для большей точности. Сайт должен быть ориентирован не на конкретное устройство, а на содержимое. Mobile First — подход, который предполагает сначала разработку мобильной версии, а затем ее усложнение до десктопной. Самая важная информация должна быть показана первой. Сайт должен быть легким, для быстрой загрузки при любой скорости интернета.


25. В каких случаях есть смысл использовать функцию translate() вместо абсолютного позиционирования и наоборот ? И почему?


25) В случае создания анимаций, использование 2D-трансформаций вместо абсолютного позиционирования обычно обеспечивает большую частоту кадров за счёт более быстрого рендеринга. Свойство position имеет большее отношение к вёрстке, а не к визуальным эффектам и анимации, поэтому абсолютное позиционирование лучше использовать при необходимости статически разместить контент.


26. Что такое псевдоклассы в CSS?


26) В CSS псевдоклассы используются для описания стилей элементов, находящихся в особых состояниях. Псевдоклассы можно использовать совместно с CSS-селекторами для настройки внешнего вида элементов на основе их состояний.


27. Каковы преимущества CSS?


27) Преимущества CSS следующие:

Это помогает быстрее загружать страницы, так как нет необходимости каждый раз писать атрибуты HTML-тега. В CSS это может быть объявлено один раз, а cab используется много раз.
Это также помогает сэкономить время, поскольку ту же таблицу стилей CSS можно использовать и на других страницах HTML.
Легко поддерживать, если есть какие-либо изменения в стиле, это можно сделать в одном месте, и нет необходимости вносить изменения в разных местах.
Это помогает улучшить внешний вид HTML-страницы по сравнению с HTML-атрибутами или тегами.
Он помогает использовать один и тот же HTML-документ на разных устройствах и в разных версиях веб-сайта.
Это помогает в работе в автономном режиме. Он хранит приложение в автономном кеше, что также помогает ускорить загрузку и повысить производительность.
Он также не зависит от платформы. Его также можно просматривать в последних браузерах.


28. Объяснить компоненты CSS?


28) Это основные вопросы CSS для интервью, которые задаются в интервью. Он состоит из трех частей:

Селектор - это HTML-тег, к которому будет применяться стиль. Теги похожи
и т.п.
Свойство - это тип атрибутов тега HTML, которые преобразуются в свойства CSS. Примеры этого - граница, цвет и т. Д.
Значения, которые присваиваются свойствам, например, определяют любое значение цвета или любое другое определенное свойство в CSS.


29. Объясните различные виды селекторов и способы нацеливания на элементы?


29) Различные виды селекторов - это теги, id и классы. Тег в CSS помогает ссылаться на тег HTML. Идентификатор помогает ссылаться на атрибут идентификатора тега HTML, а класс помогает ссылаться на атрибут класса в теге HTML.

Различные способы нацеливания на элементы - это тег, класс и идентификатор. С помощью тега он может быть нацелен на то, чтобы тело и класс были указаны в HTML, это может быть цель с .classname. Идентификатор может быть ориентирован с помощью «#ID»,


30. Объясните блочную модель CSS и ее элементы?


30) Блочная модель CSS состоит из следующих элементов: Margin, Border, padding и content. Поле - это самый верхний слой, в котором описана общая структура. Граница находится между полем и отступом или может быть определена как заполнение и содержимое вокруг границы. Цвет фона влияет на границу. Отступы - это пространство между границей и содержимым. Это означает, что если элемент имеет цвет фона и этот цвет также будет заполнять отступы. Содержимое - это фактические данные, которые отображаются.


31. Объясните предпочтительный способ определения размера шрифта?


31)В CSS определение размера шрифта очень важно для создания контента в соответствии с требованиями. Размер текста в основном ориентирован на единицы измерения, которые вы использовали. Единицами измерения могут быть px, em, rem, %, vs и vh. Преимущественно пиксель (px) используется для определения размеров шрифта. Как известно, все браузеры не поддерживают одинаковые шрифты. Преимущественно веб-безопасные шрифты устанавливаются в системах, и браузеры иногда не могут их распознать. Чтобы избежать этого запасного шрифта, используется для отображения содержимого в браузере.


32. Объясните термин изящная деградация?


32) Определенные свойства измерения: высота, минимальная высота, максимальная высота, ширина, минимальная ширина и максимальная ширина.


33. Объясните различные типы носителей?


33) Используются различные типы носителей: экранные, проекционные, звуковые, печатные и портативные. CSS можно использовать для разных экранов, таких как экран компьютера или ноутбука. Его можно использовать для портативного устройства, например мобильного телефона. CSS используется для проецирования на проекторы. Он используется в синтезаторе звука и речи. Он также дает предварительный просмотр содержимого во время печати документа.


34. Объясните, как обрабатывать различия браузеров в CSS?


34) Это расширенный CSS Интервью Вопросы, заданные в интервью. Последние браузеры обновляются в основном всеми функциями для работы с веб-сайтом или веб-приложениями. Между браузерами всегда есть разница, так как некоторые из них поддерживают стили CSS, или некоторые не поддерживают тот же стиль. Таким образом, всегда есть предел стиля, который можно использовать с использованием резервных стилей. Функция @support в CSS помогает определить определенную функцию, доступную в браузере или нет. Если это возможно, используйте другой альтернативный стиль.


35. Объясните Flexbox и CSS сетку?


35) Flexbox - это инструмент верстки, который очень полезен в небольших областях сайта. Главной особенностью этого является выравнивание элементов по горизонтальной или вертикальной оси. Он используется для автоматического разметки элемента с другими параметрами макета и в определенном порядке для отображения элементов.


36. Объясните, что вы понимаете в блочной модели и как вы указываете браузеру в CSS визуализировать ваш макет в различных блочных моделях.


36) Блочная модель представляет собой поведение элементов на веб-странице и взаимодействие друг с другом в отношении некоторых их свойств, таких как ширина, высота, поля, отступы и границы. Также существуют разные типы отображения для каждого элемента, такие как блок, встроенный блок, гибкость, сетка и т. Д., Которые изменят свое положение на странице.

Что касается размеров, стандартное поведение элементов определяется следующим уравнением:

total = width + padding + margin + border

Если вы не хотите иметь проблем с макетом при определении его реальной ширины, вы можете использовать box-sizing: border-box, таким образом, общая ширина вашего элемента будет той, которую вы укажете, независимо от количества границ, полей и отступов. .

С точки зрения позиционирования стандартное поведение элементов зависит от его типа. Например, divэлемент имеет, display: blockесли он не указан в коде, а aэлемент имеет стандарт display: inline-block. Если вы хотите изменить поведение этих элементов, вам нужно указать это.


37. Какие существуют различные методы клиринга и какие из них подходят для какого контекста?


37) Давайте сначала разберемся, что такое плавающие элементы. Когда вы создаете floatэлементы, они будут влиять на расположение других элементов, находящихся в том же контейнере. Например, у вас есть два изображения и некоторый текст между ними, затем вы даете первое изображение float: leftи второе float: right. Текст будет обтекать изображения.

clearСвойство определяет , будет ли плавал элементы не могут существовать , кроме очищенную элемента, он может очистить влево, вправо, или с обеих сторон. На изображении выше нам может не понадобиться текст справа от левого изображения или слева от правого изображения. У нас есть несколько методов, которые можно использовать, чтобы это исправить:

Empty divwith clear: both: Этот прием не самый смысловой, но он решает нашу проблему. Что вам нужно сделать, так это создать divэлемент после плавающего элемента, а затем передать его clear: both, убедившись, что он занимает все оставшееся пространство рядом с плавающим элементом, чтобы все следующие элементы располагались под ним.
Переполнение родительского элемента: вы можете использовать overflow: autoсвойство для родительского элемента, содержащего ваши поплавки, это заставит все следующие элементы располагаться под ним. Это тоже не самая семантическая стратегия, особенно если вы создаете родительский элемент только для этой цели.
.clearfixМетод: Это самый лучший способ решить эту проблему , так как вам не нужно создавать какие - либо не-семантические элементы, и вы будете придерживаться CSS, используя псевдо-селектор.


38. Какие бывают значения display? Расскажите как ведёт себя каждое свойство.


38) display: block | inline | inline-block | inline-table |
    inline-flex | flex | list-item | none |
    run-in | table | table-caption | table-cell | table-column-group | table-column |
    table-footer-group | table-header-group | table-row | table-row-group


39. block


39) Элемент показывается как блочный. Применение этого значения для строчных элементов, например <span>, заставляет его вести подобно блокам — происходит перенос строк в начале и в конце содержимого.


40. inline


40) Элемент отображается как строчный. Использование блочных элементов, таких, как <div> и <p>, автоматически создаёт перенос и показывает их содержимое с новой строки. Значение inline отменяет эту особенность, поэтому содержимое блочных элементов начинается с того места, где окончился предыдущий элемент.


41. inline-block


41) Это значение генерирует блочный элемент, который обтекается другими элементами веб-страницы подобно строчному элементу. Фактически такой элемент по своему действию похож на встраиваемые элементы (вроде <img>). При этом его внутренняя часть форматируется как блочный элемент, а сам элемент — как строчный.


42. inline-table


42) Определяет, что элемент является таблицей, как при использовании <table>, но при этом таблица является строчным элементом и происходит её обтекание другими элементами, например, текстом.


43. inline-flex


43)Элемент ведёт себя как строчный и выкладывает содержимое согласно флекс-модели.


44. flex


44) Элемент ведёт себя как блочный и выкладывает содержимое согласно флекс-модели.


45. list-item


45)Элемент выводится как блочный и добавляется маркер списка. none Временно удаляет элемент из документа. Занимаемое им место не резервируется, и веб-страница формируется так, словно элемента и не было. Изменить значение и сделать вновь видимым элемент можно с помощью скриптов, обращаясь к свойствам через объектную модель. В этом случае происходит переформатирование данных на странице с учётом вновь добавленного элемента.


46. run-in


46) Устанавливает элемент как блочный или строчный, в зависимости от контекста.


47. table


47) Определяет, что элемент является блочной таблицей, подобно использованию <table>.


48. table-caption


48) Задаёт заголовок таблицы, подобно применению <caption>.


49. table-cell


49)Указывает, что элемент представляет собой ячейку таблицы (<td> или <th>).


50. table-column


50) Назначает элемент колонкой таблицы, словно был добавлен <col>.


51.table-column-group


51) Определяет, что элемент является группой одной или более колонок таблицы, как при использовании <colgroup>.


52. table-footer-group


52) Используется для хранения одной или нескольких строк ячеек, которые отображаются в самом низу таблицы. По своему действию сходно с работой <tfoot>.


53. table-header-group


53)Элемент предназначен для хранения одной или нескольких строк ячеек, которые представлены вверху таблицы. По своему действию сходно с работой <thead>.


54. table-row


54)Элемент отображается как строка таблицы (<tr>).


55. table-row-group


55)Создаёт структурный блок, состоящий из нескольких строк таблицы, аналогично действию <tbody>.


56.Вес селекторов (по убыванию):


56)style=""
#id
.class
[attr=value]
LI
*
Селектор с наивысшим «счётом» будет преобладать, независимо от порядка, в котором появляются правила CSS.


57. Какие бывают значения у свойства position? Расскажите как ведёт себя каждое свойство.


57)position: absolute | fixed | relative | static | sticky


58.absolute


58) Абсолютное позиционирование. Указывает, что элемент абсолютно позиционирован, при этом другие элементы отображаются на веб-странице словно абсолютно позиционированного элемента и нет. Положение элемента задаётся свойствами left, top, right и bottom, также на положение влияет значение свойства position родительского элемента. Так, если у родителя значение position установлено как static или родителя нет, то отсчёт координат ведётся от края окна браузера. Если у родителя значение position задано как relative, то отсчёт координат ведётся от края родительского элемента.


59. fixed


59)Фиксированное позиционирование. По своему действию это значение близко к absolute, но в отличие от него привязывается к указанной свойствами left, top, right и bottom точке на экране и не меняет своего положения при прокрутке веб-страницы.


60. relative


60) Относительное позиционирование. Положение элемента устанавливается относительно его исходного места. Добавление свойств left, top, right и bottom изменяет позицию элемента и сдвигает его в ту или иную сторону от первоначального расположения.


61. static


61)Статичное позиционирование. Элементы отображаются как обычно. Использование свойств left, top, right и bottom не приводит к каким-либо результатам.


62. sticky


62)Это сочетание относительного и фиксированного позиционирования. Элемент рассматривается как позиционированный относительно, пока он не пересекает определённый порог, после чего рассматривается как фиксированный. Обычно применяется для фиксации заголовка на одном месте, пока содержимое, к которому относится заголовок, прокручивается на странице.


63.Что такое float?


63)Определяет, по какой стороне будет выравниваться элемент, при этом остальные элементы будут обтекать его с других сторон. Когда значение свойства float равно none, элемент выводится на странице как обычно, при этом допускается, что одна строка обтекающего текста может быть на той же линии, что и сам элемент.


64. Что такое clearfix? Из чего он состоит и для чего он?


64) Это способ борьбы с проблемой контейнера нулевой высоты для плавающих элементов


65.Из чего строится размер элемента?


65)Из его размера) Но тут есть оговорка на box-sizing

###box-sizing: content-box

Основывается на стандартах CSS, при этом свойства width и height задают ширину и высоту содержимого и не включают в себя значения margin, padding и border.


66.box-sizing: border-box


66)Свойства width и height включают в себя значения padding и border, но не margin.


67. Расскажите о различия padding и margin?


67)margin
Устанавливает величину отступа от каждого края элемента. Отступом является пространство от границы текущего элемента до внутренней границы его родительского элемента.

padding
Устанавливает значение полей вокруг содержимого элемента. Полем называется расстояние от внутреннего края рамки элемента до воображаемого прямоугольника, ограничивающего его содержимое.


68. Как ведут себя margin у двух элементов по соседству?


68) У блочных элементов расположенных рядом друг с другом по вертикали наблюдается эффект схлопывания, когда отступы не суммируются, а объединяются между собой. Само схлопывание действует на два и более блока (один может быть вложен внутрь другого) с отступами сверху или снизу, при этом примыкающие отступы комбинируются в один. Для отступов слева и справа схлопывание никогда не применяется.

Схлопывание не срабатывает:

для элементов, у которых на стороне схлопывания задано свойство padding.
для элементов, у которых на стороне схлопывания задана граница; на элементах с абсолютным позиционированием, т. е. таких, у которых position установлено как absolute;
на плавающих элементах (для них свойство float задано как left или right);
для строчных элементов;
для <html>.


69.Есть ли у тегов предопределённые стили?


69)Есть, в Консоли можно посмотреть. В частности у input. В разных браузерах может быть по-разному.


70.Как браузер «читает» css?


70)Делает он это сверху вниз, проходясь последовательно по каждой строчке.


71.Какие свойства браузеру отрисовать тяжелее всего?


71)К ним относятся: box-shadow, border-radius, прозрачность (так как браузер должен высчитывать что показывает под полу-прозрачным элементом), трансформами transform и убийцы производительности CSS фильтры.

«Тяжелее» всего свойства меняющие вид страницы при прокрутке. Например, есть полупрозрачные тени у блоков и один из них закреплен. При прокрутке будет постоянно рассчитываться перекрытие теней.


73. Какие вы знаете псевдоэлементы?


73)Самые «ходовые»:

:after
:before
:placeholder
:selection


74.Что такое наследование стилей?


74)Наследование в CSS — механизм, с помощью которого значения свойств элемента-родителя передаются его элементам-потомкам.

Стили, присвоенные некоторому элементу, наследуются всеми потомками (вложенными элементами), если они не переопределены явно. Например, размер шрифта и его цвет достаточно применить к body, чтобы все элементы внутри имели те же свойства.

Наследование позволяет сократить размер таблицы стилей, но если стилей много, то отследить какой родительский элемент установил некоторое свойство, становится сложнее.


75. Как отцентровать элемент по вертикали не зная высоту родительского блока? Перечислите все известные вам методы.


75)таблица
позиционирование
tranform
flexbox


76. auto


76)Если задано одновременно для ширины и высоты (auto auto), размеры фона остаются исходными; если только для одной стороны картинки (100px auto), то размер вычисляется автоматически исходя из пропорций картинки.


77. cover


77)Масштабирует изображение с сохранением пропорций так, чтобы его ширина или высота равнялась ширине или высоте блока.


78. contain


78)Масштабирует изображение с сохранением пропорций таким образом, чтобы картинка целиком поместилась внутрь блока.


79. Чем отличается article от section?


79)article
Элемент <article> задаёт содержание сайта вроде новости, статьи, записи блога, форума и др.

section
Задаёт раздел документа, может применяться для блока новостей, контактной информации, глав текста, вкладок в диалоговом окне и др. Раздел обычно содержит заголовок. Допускается вкладывать один тег <section> внутрь другого.


80. Какие вы знаете способы организации css кода?


80)БЭМ
OOCSS
SMACSS
Atomic CSS


81. Что такое БЭМ?


81)БЭМ (Блок, Элемент, Модификатор) — компонентный подход к веб-разработке. В его основе лежит принцип разделения интерфейса на независимые блоки. Он позволяет легко и быстро разрабатывать интерфейсы любой сложности и повторно использовать существующий код, избегая «Copy-Paste».


82. Какие из инструментов сборки вам знакомы?


82)Gulp, Grunt, Webpack 


83. Что такое размер viewport?


83)Мобильные браузеры отображают страницы в виртуальном «окне» (viewport, вьюпорт), которое, как правило, шире экрана устройства. Поэтому им не нужно сжимать макет каждой страницы в крошечное окно (что может сломать многие сайты, не оптимизированные под мобильные устройства). Пользователи могут изменять и масштабировать видимую область, чтобы видеть разные части страницы.


84. Какой размер вертикального скролла?


84)Обычно она равна 16px, в редких и мобильных браузерах может колебаться от 14px до 18px, а кое-где даже равна 0px.


85. Как правильно задать overflow для body чтобы сохранить вертикальный скролл?


85)overflow-x: hidden;


86. Что такое ретинизация?


86) Корректное отображение элементов на ретина экранах.


87. Должны ли мы отдавать разные размеры картинок пользователям разных устройств? Если да, то как?


87)<picture>


88. Как можно задавать размеры картинкам?


88) Можно стилями, можно width, height.


89. Что такое SVG?


89)Scalable Vector Graphics — масштабируемая векторная графика.


90. Что лучше, делать иконки через SVG или через иконочные шрифты?


90) svg


91. Какие вы знаете способы подключения шрифтов к странице?


91)Ссылкой, инлайново в стилях.


92. 





