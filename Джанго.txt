1. Скачиваем джанго - "pip install django";

2. Создаем в терминале проект, с папкой имеющей такое же название как и проект - "django-admin startproject mysite";

3. Проверка сайта - "python manage.py runserver";

4. Создадим свое первое представление - "python manage.py startapp maine"(groups);

5. В settings.py регистрируем приложение (всегда при создании нового приложения, регистрируем его в настройках):
	
	INSTALLED_APPS = [
    		'maine',
	]
6. Отслеживаем url адрес, в mysite т.к. он главный в проекте, и делает отсылку на конкретные файлы, "urls.py", при этом подключаем метод include, из библиотеки:

	from django.urls import path, include
	urlpatterns = [
    		path('', include('maine.urls')),
	]

7. Отслеживаем url адрес второстепенного файла, в "maine", так же в "urls.py", для главной страницы при этом подключаем метод "views", из файла "maine/urls/py":

	from . import views
	urlpatterns = [
    		path('', views.index)
	]

8. Создадим в "maine/views/py" промежуточный метод:

	def index():
		pass

9. Таким же образом можно создать пути к второстепенным сайтам;

10. Создаем внутри приложния "maine.py" папку "templates.py", затем в ней создаем еще папку, "maine.py", и уже в ней будут html шаблоны;

11. Редактируем код в "maine/views/py", чтоб обратится к html шаблону, импортируем новую библиотеку и паралельно таким же образом создаем страницу про нас:

	from django.shortcuts import render
	def index(request):
    		data = {
        		'title': 'Главная страница',
        		}
    		return render(request, 'index.html', data)

12. Прописываем html код в "index.html" и "about.html";

13. В папке "maine.py" сделаем папку "static", в которой будут папки "css", "foto" и "js";

14. В "settings.py" пропишим код для сss:

	STATICFILES_DIRS = [
    		BASE_DIR / "static",
	]

15. В конце для статических файлов в "mysite/urls.py" добавим код:

	urlpatterns = [
    		path('admin/', admin.site.urls),
    		path('', include('maine.urls')),
	] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

16. Добавим имя для главной ссылки, в "maine/urls.py", "home", имя ссылки может быть любым, оно подставляется в виде {% urls 'home' %}:

	from django.urls import path
	from . import views
	urlpatterns = [
    		path('', views.index, name='home'),
    		path('about', views.about, name='about')
	]

17. Новостная страница - "python manage.py startapp news"

18. Регистрируем новую страницу в "settings.py":

	INSTALLED_APPS = [
    		'news',
	]

19. Прописываем адрес для новостной страницы в "mysite/urls.py":

	urlpatterns = [
    		path('admin/', admin.site.urls),
    		path('', include('maine.urls')),
    		path('news', include('news.urls')),
	] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

20. Так же прописываем адрес для новостной страницы в "news/urls.py"

	urlpatterns = [
    		path('', views.news_home, name='news_home'),

21. Создадим новый метод в "news/views.py", где, Articles.objects.order_by('date'), сортировка объектов по дате,

	def news_home(request):
    		news = Articles.objects.order_by('date')
    		return render(request, 'news/news_home.html', {'news': news})

22. Создаем html шаблон по аналогии с "maine.py", в папке templates, "news_home.html";

23. Создаем таблицу в "news/models.py", где models.CharField, models.TextField, models.DateTimeField - поля моделей:

	class Articles(models.Model):
    		title = models.CharField('Название', max_length=50)
    		anons = models.CharField('Анонс', max_length=250)
    		full_text = models.TextField('Статья')
    		date = models.DateTimeField('Дата публикации')

24. Проведем миграции - "python manage.py makemigrations";

25. Создаем админа на сайте - "python manage.py createsuperuser";

26. Для отображения статьи в админ паненле, пропишем в "news/admin.py" такой код:

	from .models import Articles
		admin.site.register(Articles)

27. Поменяем название новостной страницы:

	    class Meta:
        	verbose_name = 'Новость'
        	verbose_name_plural = 'Новости'

28. Пропишим библиотеку для нужной таблицы в "news/views.py":

	from .models import Articles

29. В "maine/templates/maine/layot.html" пропишем код для добавления статьи, где "{% url 'create' %}" ссылка:

	<a href="{% url 'create' %}"><li><button class="btn btn-info"><i class="fas fa-plus-circle"></i> Добавить запись</button></li></a>


30. В "news/urls.py" пропишем путь к новой старанице:

	urlpatterns = [
    		path('', views.news_home, name='news_home'),
    		path('create', views.create, name='create'),
	]


31. В "news/views.py" создадим функцию для создания статьи:

	def create(request):
    		error = ''
    		form = ArticlesForm()

    		data = {
        		'form': form,
        		'error': error
    		}

    		return render(request, 'news/create.html', data)

32. Создаем html шаблон по аналогии с "maine.py", в папке templates, "create.html";

33. Создаем "forms.py", и в нем создаем 2 класса, основной и вложенный, с виджетами:

	from .models import Articles
	from django.forms import ModelForm, TextInput, DateTimeInput, Textarea

	class ArticlesForm(ModelForm):
    		class Meta:
        		model = Articles
        		fields = ['title', 'anons', 'full_text', 'date']

        		widgets = {
            			"title": TextInput(attrs={
                		'class': 'form-control',
                		'placeholder': 'Название статьи'
            		}),
            			"anons": TextInput(attrs={
                		'class': 'form-control',
                		'placeholder': 'Анонс статьи'
            		}),
            			"date": DateTimeInput(attrs={
                		'class': 'form-control',
                		'placeholder': 'Дата публикации'
            		}),
            			"full_text": Textarea(attrs={
                		'class': 'form-control',
                		'placeholder': 'Текст статьи'
            		})
        	}

34. В "news/views.py" импортируем новую библиотеку, для изменения url страницы, в зависимости от номера статьи:

	from django.views.generic import DetailView

35. В "news/views.py" создадим класс, который будет отвечать за изменение url страницы, в зависимости от номера статьи:


	class NewsDetailView(DetailView):
    		model = Articles
    		template_name = 'news/details_view.html'
    		context_object_name = 'article'

36. Пропишем код, в "news/urls.py", который прослеживает адрес класса NewsDetailView, где <int:pk>, pk - первичный ключ, int - число:

	urlpatterns = [
    		path('<int:pk>', views.NewsDetailView.as_view(), name='news-detail'),
	]

37. Создаем html шаблон по аналогии с "maine.py", в папке templates, "details_view.html";











 